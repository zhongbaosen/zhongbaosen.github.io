[{"title":"React Native踩坑记录","date":"2018-04-20T01:32:25.000Z","path":"2018/04/20/201842094457/","text":"前言研究React Native中遇到很多坑，在这里和大家分享下我自己的踩坑记录 搭建环境首先我们先安装好React Native的环境1npm install -g react-native-cli 测试安装123react-native init AwesomeProjectcd AwesomeProjectreact-native run-android 需要的模拟器Genymotion模拟器 坑有待更新","tags":[{"name":"react","slug":"react","permalink":"https://blog.senshine.top/tags/react/"}]},{"title":"chrome插件开发","date":"2018-04-09T07:10:09.000Z","path":"2018/04/09/2018403150235/","text":"前言什么是Chrome插件严格来讲，我们正在说的东西应该叫Chrome扩展(Chrome Extension)，真正意义上的Chrome插件是更底层的浏览器功能扩展，可能需要对浏览器源码有一定掌握才有能力去开发。鉴于Chrome插件的叫法已经习惯，本文也全部采用这种叫法，但读者需深知本文所描述的Chrome插件实际上指的是Chrome扩展。 Chrome插件是一个用Web技术开发、用来增强浏览器功能的软件，它其实就是一个由HTML、CSS、JS、图片等资源组成的一个.crx后缀的压缩包. 学习Chrome插件开发有什么意义增强浏览器功能，轻松实现属于自己的“定制版”浏览器，等等。 Chrome插件提供了很多实用API供我们使用，包括但不限于： 书签控制； 下载控制； 窗口控制； 标签控制； 网络请求控制，各类事件监听； 自定义原生菜单； 完善的通信机制； 等等； 为什么是Chrome插件而不是Firefox插件Chrome占有率更高，更多人用；开发更简单；应用场景更广泛，Firefox插件只能运行在Firefox上，而Chrome除了Chrome浏览器之外，还可以运行在所有webkit内核的国产浏览器，比如360极速浏览器、360安全浏览器、搜狗浏览器、QQ浏览器等等；除此之外，Firefox浏览器也对Chrome插件的运行提供了一定的支持； 开发调试Chrome插件没有严格的项目结构要求，只要保证本目录有一个manifest.json即可，也不需要专门的IDE，普通的web开发工具即可。 从右上角菜单-&gt;更多工具-&gt;扩展程序可以进入 插件管理页面，也可以直接在地址栏输入 chrome://extensions 访问。 勾选开发者模式即可以文件夹的形式直接加载插件，否则只能安装.crx格式的文件。Chrome要求插件必须从它的Chrome应用商店安装，其它任何网站下载的都无法直接安装，所以，其实我们可以把crx文件解压，然后通过开发者模式直接加载。 开发中，代码有任何改动都必须重新加载插件，只需要在插件管理页按下Ctrl+R即可，以防万一最好还把页面刷新一下。 #核心介绍 manifest.json这是一个Chrome插件最重要也是必不可少的文件，用来配置所有和插件相关的配置，必须放在根目录。其中，manifest_version、name、version3个是必不可少的，description和icons是推荐的。 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596&#123; // 清单文件的版本，这个必须写，而且必须是2 \"manifest_version\": 2, // 插件的名称 \"name\": \"demo\", // 插件的版本 \"version\": \"1.0.0\", // 插件描述 \"description\": \"简单的Chrome扩展demo\", // 图标，一般偷懒全部用一个尺寸的也没问题 \"icons\": &#123; \"16\": \"img/icon.png\", \"48\": \"img/icon.png\", \"128\": \"img/icon.png\" &#125;, // 会一直常驻的后台JS或后台页面 \"background\": &#123; // 2种指定方式，如果指定JS，那么会自动生成一个背景页 \"page\": \"background.html\" //\"scripts\": [\"js/background.js\"] &#125;, // 浏览器右上角图标设置，browser_action、page_action、app必须三选一 \"browser_action\": &#123; \"default_icon\": \"img/icon.png\", // 图标悬停时的标题，可选 \"default_title\": \"这是一个示例Chrome插件\", \"default_popup\": \"popup.html\" &#125;, // 当某些特定页面打开才显示的图标 /*\"page_action\": &#123; \"default_icon\": \"img/icon.png\", \"default_title\": \"我是pageAction\", \"default_popup\": \"popup.html\" &#125;,*/ // 需要直接注入页面的JS \"content_scripts\": [ &#123; //\"matches\": [\"http://*/*\", \"https://*/*\"], // \"&lt;all_urls&gt;\" 表示匹配所有地址 \"matches\": [\"&lt;all_urls&gt;\"], // 多个JS按顺序注入 \"js\": [\"js/jquery-1.8.3.js\", \"js/content-script.js\"], // JS的注入可以随便一点，但是CSS的注意就要千万小心了，因为一不小心就可能影响全局样式 \"css\": [\"css/custom.css\"], // 代码注入的时间，可选值： \"document_start\", \"document_end\", or \"document_idle\"，最后一个表示页面空闲时，默认document_idle \"run_at\": \"document_start\" &#125;, // 这里仅仅是为了演示content-script可以配置多个规则 &#123; \"matches\": [\"*://*/*.png\", \"*://*/*.jpg\", \"*://*/*.gif\", \"*://*/*.bmp\"], \"js\": [\"js/show-image-content-size.js\"] &#125; ], // 权限申请 \"permissions\": [ \"contextMenus\", // 右键菜单 \"tabs\", // 标签 \"notifications\", // 通知 \"webRequest\", // web请求 \"webRequestBlocking\", \"storage\", // 插件本地存储 \"http://*/*\", // 可以通过executeScript或者insertCSS访问的网站 \"https://*/*\" // 可以通过executeScript或者insertCSS访问的网站 ], // 普通页面能够直接访问的插件资源列表，如果不设置是无法直接访问的 \"web_accessible_resources\": [\"js/inject.js\"], // 插件主页，这个很重要，不要浪费了这个免费广告位 \"homepage_url\": \"https://www.baidu.com\", // 覆盖浏览器默认页面 \"chrome_url_overrides\": &#123; // 覆盖浏览器默认的新标签页 \"newtab\": \"newtab.html\" &#125;, // Chrome40以前的插件配置页写法 \"options_page\": \"options.html\", // Chrome40以后的插件配置页写法，如果2个都写，新版Chrome只认后面这一个 \"options_ui\": &#123; \"page\": \"options.html\", // 添加一些默认的样式，推荐使用 \"chrome_style\": true &#125;, // 向地址栏注册一个关键字以提供搜索建议，只能设置一个关键字 \"omnibox\": &#123; \"keyword\" : \"go\" &#125;, // 默认语言 \"default_locale\": \"zh_CN\", // devtools页面入口，注意只能指向一个HTML文件，不能是JS文件 \"devtools_page\": \"devtools.html\"&#125;","tags":[{"name":"chrome","slug":"chrome","permalink":"https://blog.senshine.top/tags/chrome/"}]},{"title":"vscode内npm断点调试配置参数","date":"2018-03-26T07:47:03.000Z","path":"2018/03/26/2018326155225/","text":"编辑launch.json 点击左边竖排的第四个（中间有蜘蛛的那个图标） 点击左边文件launch上调试的下来添加配置，会自动生成launch.json配置为 123456789101112131415161718&#123; \"version\": \"0.2.0\", \"configurations\": [ &#123; \"name\": \"Launch Egg\", \"type\": \"node\", \"request\": \"launch\", \"cwd\": \"$&#123;workspaceRoot&#125;\", \"runtimeExecutable\": \"npm\", \"windows\": &#123; \"runtimeExecutable\": \"npm.cmd\" &#125;, \"runtimeArgs\": [ \"run\", \"debug\" ], \"console\": \"integratedTerminal\", \"protocol\": \"auto\", \"restart\": true, \"port\": 9999 &#125; ]&#125; 点击调试上的三角形 测试调试断点选择 controller的home.js在中间的任意一行右键添加断点列，然后在访问web这个controller时就可以达到断点的效果了","tags":[{"name":"npm","slug":"npm","permalink":"https://blog.senshine.top/tags/npm/"},{"name":"vscode","slug":"vscode","permalink":"https://blog.senshine.top/tags/vscode/"}]},{"title":"Centos7使用yum安装Mysql","date":"2018-03-26T03:28:46.000Z","path":"2018/03/26/2018326112615/","text":"安装Centos7的yum源中默认是没有mysql,因为现在已经用mariaDB代替mysql了。 首先我们下载mysql的repo源，我们可以去mysql官网找最新的repo源地址 戳我进入地址 开始在linux下下载repo源 下载mysql源12345678//下载mysql rpm包# wget http://dev.mysql.com/get/mysql57-community-release-el7-11.noarch.rpm //安装mysql rpm包# rpm -ivh mysql57-community-release-el7-11.noarch.rpm //安装mysql# yum install mysql-community-server 重启服务安装成功后需要重启mysql服务。 1# service mysqld restart 获取随机密码刚开始安装的Mysql5.7是会随机生成一个root密码的，我们要先找到这个随机密码，然后改新密码。我们可以通过grep命令查找随机root密码。 12[root@local bin]# grep \"password\" /var/log/mysqld.log2017-09-24T08:03:30.664086Z 1 [Note] A temporary password is generated for root@localhost: 8A3xwbk8_P1A 使用随机密码登录1$ mysql -uroot -p 再输入密码进行访问 修改密码用该密码登录到服务端后，必须马上修改密码，不然会报如下错误： 123mysql&gt; select @@log_error;ERROR 1820 (HY000): You must reset your password using ALTER USER statement before executing this statement.mysql&gt; 1mysql&gt; ALTER USER 'root'@'localhost' IDENTIFIED BY 'root123'; 密码过于简单出现的问题如果密码设置太简单出现以下的提示 1ERROR 1819 (HY000): Your password does not satisfy the current policy requirements 如何解决ERROR 1819 (HY000): Your password does not satisfy the current policy requirements呢？ 这里直接提供解决方案文末有详细的说明 必须修改两个全局参数：首先，修改validate_password_policy参数的值 1mysql&gt; set global validate_password_policy=0; 再修改密码的长度 1mysql&gt; set global validate_password_length=1; 1mysql&gt; set global validate_password_mixed_case_count=2; 再次执行修改密码就可以了 数据库授权访问1mysql&gt; GRANT ALL PRIVILEGES ON *.* TO 'root'@'%' IDENTIFIED BY '123456' WITH GRANT OPTION; %号代表所有都能访问，若输入你的IP地址，则只有这个IP能远程访问到 最后修改生效的命令 1mysql&gt; FLUSH PRIVILEGES;","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"mysql","slug":"mysql","permalink":"https://blog.senshine.top/tags/mysql/"}]},{"title":"oh-my-zsh,给你一个不一样的shell","date":"2018-03-21T06:40:52.000Z","path":"2018/03/21/2018321134451/","text":"前言oh my zsh shell的类型有很多种，linux下默认的是bash，虽然bash的功能已经很强大，但对于以懒惰为美德的程序员来说，bash的提示功能不够强大，界面也不够炫，并非理想工具。 而zsh的功能极其强大，只是配置过于复杂，起初只有极客才在用。后来，有个穷极无聊的程序员可能是实在看不下去广大猿友一直只能使用单调的bash, 于是他创建了一个名为oh-my-zsh的开源项目… 自此，只需要简单的安装配置，小白程序员们都可以用上高档大气上档次，狂拽炫酷吊炸天的oh my zsh 安装步骤安装zsh以centos7为例： 查看系统当前使用的shell 12$ echo $SHELL /bin/bash 查看系统是否安装了zsh 1$ cat /etc/shells centos7默认情况下没安装zsh 1$ yum -y install zsh 查看shell列表 1$ cat /etc/shells 切换shell为zsh 123$ chsh -s /bin/zshChanging shell for root.Shell changed. 重启服务器后，可使用reboot 重启后，查看当前shell 12$ echo $SHELL /bin/zsh 安装 oh my zshoh-my-zsh源码是放在github上，先确保你的机器上已安装了git 安装： 1wget https://github.com/robbyrussell/oh-my-zsh/raw/master/tools/install.sh -O - | sh 成功界面: 12345678910 ____ /__ ____ ___ __ __ ____ _____/ /_ / __ \\/ __ \\ / __ `__ \\/ / / / /_ / / ___/ __ \\ / /_/ / / / / / / / / / / /_/ / / /_(__ ) / / / \\____/_/ /_/ /_/ /_/ /_/\\__, / /___/____/_/ /_/ /____/ ....is now installed!Please look over the ~/.zshrc file to select plugins, themes, and options.p.s. Follow us at https://twitter.com/ohmyzsh.p.p.s. Get stickers and t-shirts at http://shop.planetargon.com. 接下来只需简单的配置，就可以享受oh-my-zsh的强大 主题选择oh-my-zsh有很多漂亮的主题: 戳我看主题 这里我使用的主题是ys 戳我看ys主题 修改主题1$ vim ~/.zshrc 将ZSH_THEME改成ys 1ZSH_THEME=\"ys\" 更新配置： 1$ source ~/.zshrc 自动补齐插件linux不少命令的参数很多，不可能一一记住，常规的查看手册又觉得慢。如果你也有这种苦恼，那么我相信你会爱上oh-my-zsh的 废话不多说，直接上图更清晰 戳我进incr.zsh 补全插件 安装及配置插件进入插件文件夹 1cd ~/.oh-my-zsh/plugins/ 创建incr文件夹 1mkdir incr 下载此插件： 1$ wget http://mimosa-pudica.net/src/incr-0.2.zsh 编辑配置文件 1$ vim ~/.zshrc 在~/.zshrc文件末尾加上 1$ source ~/.oh-my-zsh/plugins/incr/incr*.zsh 更新配置： 1$ source ~/.zshrc 接下来你就可以体验到Your terminal never felt this good before…","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"zsh","slug":"zsh","permalink":"https://blog.senshine.top/tags/zsh/"}]},{"title":"Centos环境下安装mongoDB","date":"2018-03-20T05:25:44.000Z","path":"2018/03/20/2018320132519/","text":"安装步骤创建仓库文件1vi /etc/yum.repos.d/mongodb-org-3.4.repo 然后复制下面配置,保存退出 123456[mongodb-org-3.4]name=MongoDB Repositorybaseurl=https://repo.mongodb.org/yum/redhat/$releasever/mongodb-org/3.4/x86_64/gpgcheck=1enabled=1gpgkey=https://www.mongodb.org/static/pgp/server-3.4.asc yum安装1yum install -y mongodb-org 没有权限就在前面加: sudo 安装完毕后修改配置文件: 1vi /etc/mongod.conf 修改配置文件的 bind_ip, 默认是 127.0.0.1 只限于本机连接。所以安装完成后必须把这个修改为 0.0.0.0 ,否则通过别的机器是没法连接的! 启动、停止、重启MongoDB默认将数据文件存储在/var/lib/mongo目录，默认日志文件在/var/log/mongodb中。如果要修改,可以在 /etc/mongod.conf 配置中指定备用日志和数据文件目录。 启动命令: 1service mongod start 停止命令: 1service mongod stop 重启命令: 1service mongod restart 查看mongoDB是否启动成功: 可以通过查看日志文件 1cat /var/log/mongodb/mongod.log 日志文件应该会出现如下一句说明 1[initandlisten] waiting for connections on port &lt;port&gt; 是mongodb运行端口 也可以通过下面命令检查是否启动成功 1chkconfig mongod on 使用12345678910[root@instance-d0nk2r2c ~]# mongo ## 查看数据库&gt; show dbs; ## 查看数据库版本&gt; db.version(); ## 常用命令帮助&gt; db.help(); 卸载移除mongo1yum erase $(rpm -qa | grep mongodb-org) 移除数据库文件和日志文件12rm -r /var/log/mongodbrm -r /var/lib/mongo","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"mongoDB","slug":"mongoDB","permalink":"https://blog.senshine.top/tags/mongoDB/"}]},{"title":"js十大排序算法","date":"2018-03-20T02:00:00.000Z","path":"2018/03/20/201832095843/","text":"排序算法说明对于评述算法优劣术语的说明稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面；不稳定：如果a原本在b的前面，而a=b，排序之后a可能会出现在b的后面； 内排序：所有排序操作都在内存中完成；外排序：由于数据太大，因此把数据放在磁盘中，而排序通过磁盘和内存的数据传输才能进行； 时间复杂度: 一个算法执行所耗费的时间。空间复杂度: 运行完一个程序所需内存的大小 排序算法图片总结 排序算法图片总结 排序范例冒泡排序解析：1.比较相邻的两个元素，如果前一个比后一个大，则交换位置。 2.第一轮的时候最后一个元素应该是最大的一个。 3.按照步骤一的方法进行相邻两个元素的比较，这个时候由于最后一个元素已经是最大的了，所以最后一个元素不用比较。 123456789101112131415function sort(elements)&#123; for(var i = 0; i &lt; elements.length - 1; i++)&#123; for(var j = 0; j &lt; elements.length - i - 1;j++)&#123; if(elements[j] &gt; elements[j + 1])&#123; var swap = elements[j]; elements[j] = elements[j + 1]; elements[j + 1] = swap &#125; &#125; &#125;&#125;var elements = [3,1,5,7,2,4,9,6,19,16]console.log('排序前:'+ elements);sort(elements);console.log('排序前:'+ elements); 快速排序解析：快速排序是对冒泡排序的一种改进，第一趟排序时将数据分成两部分，一部分比另一部分的所有数据都要小。然后递归调用，在两边都实行快速排序。 12345678910111213141516171819function quickSort(elements)&#123; if(elements.length &lt;= 1)&#123; return elements; &#125; var pivoIndex = Math.floor(elements.length / 2); var pivot = elements.splice(pivoIndex,1)[0]; var left = []; var right = []; for(var i = 0; i &lt; elements.length; i++)&#123; if(elements[i] &lt; pivot)&#123; left.push(elements[i]); &#125;else&#123; right.push(elements[i]); &#125; &#125; return quickSort(left).concat([pivot],quickSort(right));&#125;;var elements = [5,6,2,1,3,8,7,1.4,4.9,5.5];console.log(quickSort(elements)); 插入算法解析： （1） 从第一个元素开始，该元素可以认为已经被排序 （2） 取出下一个元素，在已经排序的元素序列中从后向前扫描 （3） 如果该元素（已排序）大于新元素，将该元素移到下一位置 （4） 重复步骤3，直到找到已排序的元素小于或者等于新元素的位置 （5）将新元素插入到下一位置中 （6） 重复步骤2 1234567891011121314151617181920212223function sort()&#123; //假设第0个元素是一个有序的数列，第1个以后的是无序的序列 //所以从第1个元素开始将无序数列的元素插入到有序数列中 for(var i = 1; i &lt; elements.length; i++)&#123; if(elements[i] &lt; elements[i - 1])&#123; //取出无序列中的第i个作为被插入元素 var guard = elements[i]; //记住有序数列的最后一个位置,并且将有序数列位置扩大一个 var j = i - 1; elements[i] = elements[j]; //比大小,找到被插入元素所在的位置 while(j &gt;= 0 &amp;&amp; guard &lt; elements[j])&#123; elements[j + 1] = elements[j]; j--; &#125; elements[j + 1] = guard;//插入 &#125; &#125;&#125;var elements = [5,9,3,6,7,4,1,8,2];console.log(\"排序前:\"+elements);sort(elements);console.log(\"排序后:\"+elements); 二分查找 解析：二分查找，也为折半查找。首先要找到一个中间值，通过与中间值比较，大的放又，小的放在左边。再在两边中寻找中间值，持续以上操作，直到找到所在位置为止。 递归方法 12345678910111213141516function binarySearch(data,dest,start,end)&#123; var end = end || data.length - 1, start = start || 0, m = Math.floor((start + end) / 2); if(data[m] == dest)&#123; return m; &#125; if(dest &lt; data[m])&#123; return binarySearch(data,dest,0,m - 1); &#125;else&#123; return binarySearch(data,dest,m + 1,end); &#125; return false;&#125;var arr = [-34,1,3,4,5,8,45,65,34,78];console.log(binarySearch(arr,4)); 非递归方法 123456789101112131415161718function binarySearch(data,dest)&#123; var h = data.length - 1, l = 0; while(l &lt;= h)&#123; var m = Math.floor((h + 1) / 2); if(data[m] == dest)&#123; return m; &#125; if(dest &gt; data[m])&#123; l = m + 1; &#125;else&#123; h = m - 1; &#125; &#125; return false;&#125;var arr = [-34,1,3,4,5,8,45,65,34,78];console.log(binarySearch(arr,4)); 选择排序 解析:首先在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。 以此类推，直到所有元素均排序完毕。 1234567891011121314151617181920function selectionSort(arr)&#123; var len = arr.length; var minIndex,temp; console.time(\"选择排序总耗时\"); for(var i = 0; i&lt;len - 1; i++)&#123; minIndex = i; for(var j = i + 1; j &lt; len; j++)&#123; if(arr[j] &lt; arr[minIndex])&#123; minIndex = j; &#125; &#125; temp = arr[i]; arr[i] = arr[minIndex]; arr[minIndex] = temp; &#125; console.timeEnd(\"选择排序总耗时\"); return arr;&#125;var arr = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(selectionSort(arr)); 希尔排序解析:先将整个待排序的记录序列分割成为若干子序列分别进行直接插入排序 1234567891011121314151617181920function shellSort(arr)&#123; var len = arr.length,temp,gap = 1; console.time(\"希尔排序总耗时\"); while(gap &lt; len / 5)&#123; //动态定义间隔排序 gap = gap * 5 + 1; &#125; for(gap; gap &gt; 0; gap = Math.floor(gap / 5))&#123; for(var i = gap; i &lt;len; i++)&#123; temp = arr[i]; for(var j = i - gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j -= gap)&#123; arr[j + gap] = arr[j]; &#125; arr[j + gap] = temp; &#125; &#125; console.timeEnd(\"希尔排序总耗时\"); return arr;&#125;var arr = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(shellSort(arr)); 归并排序 解析:归并排序是一种稳定的排序方法。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。 1234567891011121314151617181920212223242526272829303132function mergeSort(arr)&#123; var len = arr.length; if(len &lt; 2)&#123; return arr; &#125; var middle = Math.floor(len / 2), left = arr.slice(0,middle), right = arr.slice(middle); return merge(mergeSort(left),mergeSort(right));&#125;function merge(left,right)&#123; var result = []; console.time(\"归并排序总耗时\"); while(left.length &amp;&amp; right.length)&#123; if(left[0] &lt;= right[0])&#123; result.push(left.shift()); &#125;else&#123; result.push(right.shift()); &#125; &#125; while(left.length)&#123; result.push(left.shift()); &#125; while(right.length)&#123; result.push(right.shift()); &#125; console.timeEnd(\"归并排序总耗时\"); return result;&#125;var arr = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(mergeSort(arr)); 堆排序 解析:堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是 小于（或者大于）它的父节点。 1234567891011121314151617181920212223242526272829303132333435363738394041424344function heapSort(array)&#123; console.time(\"堆排序总耗时\"); if(Object.prototype.toString.call(array).slice(8,-1) === 'Array')&#123; var heapSize = array.length,temp; //建堆 for(var i = Math.floor(heapSize / 2) - 1; i &gt;= 0; i--)&#123; heapify(array,i,heapSize); &#125; for(var j = heapSize - 1; j &gt;= 1; j--)&#123; //堆排序 temp = array[0]; array[0] = array[j]; array[j] = temp; heapify(array,0, --heapSize); &#125; console.timeEnd(\"堆排序总耗时\"); return array; &#125;else&#123; return 'array is not an Array!'; &#125;&#125;function heapify(arr, x, len)&#123; if(Object.prototype.toString.call(arr).slice(8,-1) === 'Array' &amp;&amp; typeof x === 'number')&#123; var l = 2 * x + 1, r = 2 * x + 2, largest = x, temp; if(l &lt; len &amp;&amp; arr[l] &gt; arr[largest])&#123; largest = l; &#125; if(r &lt; len &amp;&amp; arr[r] &gt; arr[largest])&#123; largest = r; &#125; if(largest != x)&#123; temp = arr[x]; arr[x] = arr[largest]; arr[largest] = temp; heapify(arr,largest,len); &#125; &#125;else&#123; return 'arr is not an Array or x is not a number!'; &#125;&#125;var arr = [91,60,96,13,35,65,46,65,10,30,20,31,77,81,22];console.log(heapSort(arr)); 计数排序 解析:计数排序使用一个额外的数组C，其中第i个元素是待排序数组A中值等于i的元素的个数。然后根据数组C来将A中的元素排到正确的位置。它只能对整数进行排序。 123456789101112131415161718192021function countingSort(array)&#123; var len = array.length,B = [],C = [], min = max = array[0]; console.time('计数排序耗时'); for(var i = 0; i &lt; len; i++)&#123; min = min&lt;=array[i] ? min :array[i]; max = max&gt;=array[i] ? max :array[i]; C[array[i]] = C[array[i]] ? C[array[i]] + 1 : 1; &#125; for(var j = min; j &lt; max; j++)&#123; C[j + 1] = (C[j + 1] || 0) + (C[j] || 0); &#125; for(var k = len - 1; k &gt;= 0; k--)&#123; B[C[array[k]] - 1] = array[k]; C[array[k]]--; &#125; console.timeEnd('计数排序耗时'); return B;&#125;var arr = [2,2,3,8,7,1,2,2,2,4,6,4,8,9,6,2,4];console.log(countingSort(array)); 桶排序 解析:假设输入数据服从均匀分布，将数据分到有限数量的桶里，每个桶再分别排序(有可能再使用别的排序算法或是以递归方式继续使用桶排序进行排序) 12345678910111213141516171819202122232425262728293031323334function bucketSort(array, num)&#123; if(array.length &lt;= 1)&#123; return array; &#125; var len = array.length,buckets = [],result = [], min = max = array[0], regex = '/^[1-9]+[0-9]*$/',space,n=0; num = num || ((num &gt; 1 &amp;&amp; regex.test(num)) ? num : 10); for(var i = 1;i &lt; len; i++)&#123; min = min &lt;=array[i] ? min: array[i]; max = max &gt;=array[i] ? max: array[i]; &#125; space = (max-min+1) / num; for(var j = 0; j &lt; len; j++)&#123; var index = Math.floor((array[j] - min) / space); if(buckets[index])&#123; //非空桶，插入序列 var k = buckets[index].length - 1; while(k &gt;= 0 &amp;&amp; buckets[index][k] &gt; array[j])&#123; buckets[index][k + 1] = buckets[index][k]; k--; &#125; buckets[index][k + 1] = array[j]; &#125;else&#123; buckets[index] = []; buckets[index].push(array[j]); &#125; &#125; while(n &lt; num)&#123; result = result.concat(buckets[n]); n++; &#125; return result;&#125;var arr = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(bucketSort(arr, 4)); 基数排序 解析:基数排序是按照低位先排序，然后收集；再按照高位排序，然后再收集；依次类推，直到最高位。有时候有些属性是有优先级顺序的，先按低优先级排序，再按高优 先级排序。最后的次序就是高优先级高的在前，高优先级相同的低优先级高的在前。基数排序基于分别排序，分别收集，所以是稳定的。 12345678910111213141516171819202122232425262728function radixSort(arr,maxDigit)&#123; var mod = 10; var dev = 1; var counter = []; console.time('基数排序总耗时'); for(var i = 0; i &lt; maxDigit; i++,dev *= 10, mod *= 10)&#123; for(var j = 0; j &lt; arr.length; j++)&#123; var bucket = parseInt((arr[j] % mod) / dev); if(counter[bucket] == null)&#123; counter[bucket] = []; &#125; counter[bucket].push(arr[j]); &#125; var pos = 0; for(var j = 0; j &lt;counter.length; j++)&#123; var value = null; if(counter[j] != null)&#123; while((value = counter[j].shift()) != null)&#123; arr[pos++] = value; &#125; &#125; &#125; &#125; console.timeEnd('基数排序总耗时'); return arr;&#125;var arr = [3,44,38,5,47,15,36,26,27,2,46,4,19,50,48];console.log(radixSort(arr,2)); 基数排序 vs 计数排序 vs 桶排序这三种排序算法都利用了桶的概念，但对桶的使用方法上有明显差异： 基数排序：根据键值的每位数字来分配桶计数排序：每个桶只存储单一键值桶排序：每个桶存储一定范围的数值","tags":[{"name":"JavaScript","slug":"JavaScript","permalink":"https://blog.senshine.top/tags/JavaScript/"}]},{"title":"服务器部署git代码托管","date":"2018-03-15T09:08:17.000Z","path":"2018/03/15/2018315170718/","text":"具体步骤安装git首先安装git，一般而言，现在的服务器已经内置了git安装包，我们只需要执行简单的安装命令即可安装。比如： 1yum install git 创建git用户及权限我们当然不允许直接使用root来进行通信交互了，所以，我们创建一个git用户来作为今后提交代码的用户。 1adduser git 执行这条命令之后，你发现在/home目录下多了一个git目录，按理来说，现在，你的系统中多了这个git用户，并且家目录在/home/git。但是，我们并不希望这个用户通过ssh连接到服务器上面去，所以，我们要禁止这个用户使用ssh连接上去进行操作。我们通过编辑一个权限文件来处理： 1vi /etc/passwd 找到类似于1git:x:1001:1001:,,,:/home/git:/bin/bash 这样的行，你看到那个末尾的/bin/bash，就是允许ssh连接操作的权限，我们把它改为/user/bin/git-shell，结果如下： 1git:x:1001:1001:,,,:/home/git:/usr/bin/git-shell 这样处理好，git就不能ssh连上去了（实际上是可以的，只不过会闪退）。 我们还得给git分配一个密码，执行： 1passwd git 123456 #(你的密码) 这个密码用在你后面提交代码的时候使用。 公钥的配置这个是git里面比较特殊的一步操作，通信的时候，客户端与服务器需要一个证书进行验证。操作方法很简单，首先在你自己的电脑上（centos）生成自己的一个公钥： – 注意这个是客户端操作123git config --global user.name \"your name\" git config --global user.email \"xxxx@xxx.com\" 123cd ~ssh-keygen -t rsa -C &quot;xxxx@xxx.com&quot; 这时你自己电脑上就有一个公钥了，但是在哪里呢？在.ssh目录下，.开头的文件夹都是隐藏的，但是可以cd进去。 123cd .sshvi id_rsa.pub 这样就能看到你的公钥了，把所有的内容复制下来。接下来，我们去回服务器上面操作。 –注意这个是客户端操作 1234567cd /home/git/mkdir .sshcd .sshvi authorized_keys 复制你的id_rsa.pub内的公钥到authorized_keys内就完工了 接下来，我们用git命令初始化一个仓库： 1git init --bare arepoforyourproject.git 初始化完成之后，这个空的仓库就OK了。 这里有一个细节，就是.git目录必须要有可读写权限，因为当我们在push的时候，是使用git用户推送到服务器上面去，会有一个写入的过程，如果不赋予可写权限，push就会失败。 试验克隆回到你本地的电脑上，我们通过克隆来试试仓库是否可以使用：1git clone git@10.0.0.121:/var/git/arepoforyourproject.git 然后会提示你输入git的密码，输入进去，然后会再提示你克隆了一个空白的版本库。这说明服务器已经OK了。 上传本地代码到私有仓库在服务器上创建了空白的版本库后,例如你是在window下进行上传,打开项目路径,右键打开git bash,输入指令 初始化git1git init 例如你要创建一个文件README 1touch README 暂存README1git add README 提交代码并描述更新内容1git commit -m \"更新个说明\" 绑定项目的地址1git remote add origin git@xxx.xxx.xxx.xxx:/yourdir/arepoforyourproject.git 第一次更新到matser主分支上1git push -u origin master 非22端口的配置当gitlab服务器ssh端口不是默认的22时，使用ssh连接gitlab会出现上面的错误 解决方法： 修改/etc/gitlab/gitlab.rd gitlab_rails[‘gitlab_shell_ssh_port’] = 9988 修改为sshd_config里的端口 sudo gitlab-ctl reconfigure 执行重新载入配置文件登录查看gitlab的项目地址可以看到域名后加了个端口 多用户和权限管理如果团队很小，把每个人的公钥收集起来放到服务器的/home/git/.ssh/authorized_keys文件里就是可行的。如果团队有几百号人，就没法这么玩了，这时，可以用Gitosis来管理公钥。","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"git","slug":"git","permalink":"https://blog.senshine.top/tags/git/"}]},{"title":"Nginx反向代理及web部署","date":"2018-03-15T06:03:44.000Z","path":"2018/03/15/2018315140242/","text":"安装步骤安装准备由于我的vue项目部署需要容器 同时也需要反向代理服务器接口 就写了这个教程进行分享 安装Nginx部署之前，最好检查一下是否已经安装有nginx 这里我用的是sh文件一键安装的，就不阐述过程了 以下是Nginx配置 12345678910111213141516171819202122232425262728293031323334server &#123; listen 80 default; #listen [::]:80 default ipv6only=on; server_name platform.senshine.top; index index.html index.htm index.php; root /home/wwwroot/default; #error_page 404 /404.html; location ^~/haha/ &#123; #添加访问目录为/proxy的代理配置 rewrite ^.+/haha/?(.*)$ /$1 break; proxy_pass [your url]; &#125; location /user/login &#123; #添加访问目录为/bproxy的代理配置 rewrite ^.+/user/login/?(.*)$ /$1 break; proxy_pass [your url]; &#125; location /get_state &#123; #添加访问目录为/aproxy的代理配置 rewrite ^.+/get_state/?(.*)$ /$1 break; proxy_pass [your url]; &#125; location /get_list &#123; #添加访问目录为/aproxy的代理配置 rewrite ^.+/get_list/?(.*)$ /$1 break; proxy_pass [your url]; &#125; access_log /home/wwwlogs/access.log access; &#125;include vhost/*.conf;&#125;","tags":[{"name":"nginx","slug":"nginx","permalink":"https://blog.senshine.top/tags/nginx/"},{"name":"Vue","slug":"Vue","permalink":"https://blog.senshine.top/tags/Vue/"}]},{"title":"CentOS7 安装 Postgresql","date":"2018-03-15T02:16:10.000Z","path":"2018/03/15/2018315101523/","text":"安装步骤在yum库里更新postgresql安装包1rpm -Uvh http://yum.postgresql.org/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm 1yum update 添加RPM1yum install https://download.postgresql.org/pub/repos/yum/9.5/redhat/rhel-7-x86_64/pgdg-centos95-9.5-2.noarch.rpm 安装postgresql1yum install postgresql95-server postgresql95-contrib 初始化PostgreSQL数据库1/usr/pgsql-9.5/bin/postgresql95-setup initdb 启动PostgreSQL服务并使之开机自启1systemctl enable postgresql-9.5 1systemctl start postgresql-9.5 调整Iptables/Firewall，调整防火墙出站规则1firewall-cmd --zone=public --add-port=5432/tcp --permanent 重启防火墙1firewall-cmd --reload 设置用户密码 登陆至postgres命令提示符界面1su - postgres 1psql 然后使用命令设置密码1234567891011postgres=# \\password postgres Enter new password: Enter it again: postgres=# \\q su root 输入root账号的密码：******** 配置PostgreSQL-MD5认证MD5认证需要客户端提供一个MD5-encrypted 密码以便身份验证。需要编辑 1vi /var/lib/pgsql/9.5/data/pg_hba.conf 添加或修改的行如下： 12345# IPv4 local connections:host all all 127.0.0.1/32 md5host all all 0.0.0.0/0 md5 配置PostgreSQL-Configure TCP/IP默认情况下，TCP/IP连接是不可行的，所以其他计算机用户不能连接到postgresql。 1vi /var/lib/pgsql/9.5/data/postgresql.conf #可以允许其他计算机连接。 把两行都注析掉并设置为你的postgresql服务器IP地址或设置为“*”监听所有客户端。如下所示： 123listen_addresses = '*'port = 5432 重启以应用更改1systemctl restart postgresql-9.5","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"postgresql","slug":"postgresql","permalink":"https://blog.senshine.top/tags/postgresql/"}]},{"title":"CentOS7yum安装nginx(sh脚本)","date":"2018-03-15T02:11:01.000Z","path":"2018/03/15/123456789/","text":"#!/bin/bashPATH=/bin:/sbin:/usr/bin:/usr/sbin:/usr/local/bin:/usr/local/sbin:~/binexport PATH #安装依赖环境yum install -y patch openssl make cmake gcc gcc-c++ gcc-g77 flex bison file libtool libtool-libs autoconf kernel-devel libjpeg libjpeg-devel libpng libpng-devel libpng10 libpng10-devel gd gd-devel freetype freetype-devel libxml2 libxml2-devel zlib zlib-devel glib2 glib2-devel bzip2 bzip2-devel libevent libevent-devel ncurses ncurses-devel curl curl-devel e2fsprogs e2fsprogs-devel krb5 krb5-devel libidn libidn-devel openssl openssl-devel vim-minimal nano fonts-chinese gettext gettext-devel ncurses-devel gmp-devel pspell-devel unzip libcap diffutils #安装PCREwget http://downloads.sourceforge.net/project/pcre/pcre/8.36/pcre-8.36.tar.gztar zxf pcre-8.36.tar.gzcd pcre-8.36/./configure &amp;&amp; make &amp;&amp; make installcd ../ #安装NGINXwget http://nginx.org/download/nginx-1.6.3.tar.gztar zxf nginx-1.6.3.tar.gzcd nginx-1.6.3/./configure –user=nobody –group=nobody –prefix=/usr/local/nginx –with-http_stub_status_module –with-http_ssl_module –with-http_gzip_static_module –with-ipv6 –with-http_sub_module –with-http_spdy_modulemake &amp;&amp; make installcd ../ ln -s /usr/local/lib/libpcre.so.1 /libln -s /usr/local/nginx/sbin/nginx /usr/bin/nginxrm -f /usr/local/nginx/conf/nginx.confmkdir -p /home/wwwroot/defaultchmod +w /home/wwwroot/defaultmkdir -p /home/wwwlogschmod 777 /home/wwwlogschown -R nobody:nobody /home/wwwroot/default wget -c http://soft.vpser.net/lnmp/ext/init.d.nginxcp init.d.nginx /etc/init.d/nginxchmod +x /etc/init.d/nginxchkconfig –level 345 nginx on/sbin/iptables -I INPUT -p tcp –dport 80 -j ACCEPT/sbin/iptables-saveldconfigwget -c http://redbook.qiniudn.com/nginx.confmv nginx.conf /usr/local/nginx/conf//etc/init.d/nginx start","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.senshine.top/tags/nginx/"}]},{"title":"CentOS7yum安装nginx","date":"2018-03-14T02:49:46.000Z","path":"2018/03/14/201831402927/","text":"安装步骤安装准备首先由于nginx的一些模块依赖一些lib库，所以在安装nginx之前，必须先安装这些lib库，这些依赖库主要有g++、gcc、openssl-devel、pcre-devel和zlib-devel 所以执行如下命令安装 1yum -y install gcc-c++ pcre pcre-devel zlib zlib-devel openssl openssl--devel 安装Nginx安装之前，最好检查一下是否已经安装有nginx 1find -name nginx 如果系统已经安装了nginx，那么就先卸载 1yum -y remove nginx 首先进入/usr/local目录 1cd /usr/local 从官网下载最新版的nginx 1wget http://nginx.org/download/nginx-1.13.8.tar.gz 解压nginx压缩包 1tar -zxvf nginx-1.13.8.tar.gz 会产生一个nginx-1.13.8 目录，这时进入nginx-1.13.8目录 1cd nginx-1.13.8 接下来安装，使用–prefix参数指定nginx安装的目录,make、make install安装 1./configure $默认安装在/usr/local/nginx 1make &amp;&amp; make install 如果没有报错，顺利完成后，最好看一下nginx的安装目录 1whereis nginx 安装完毕后，进入安装后目录（/usr/local/nginx）便可以启动或停止它了。 到此，使用CentOS安装nginx已经完成了，其实看看还是蛮简单的。","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"nginx","slug":"nginx","permalink":"https://blog.senshine.top/tags/nginx/"}]},{"title":"centos7.防火墙的基本使用","date":"2018-03-13T15:50:14.000Z","path":"2018/03/13/2018313234311/","text":"使用方法查看防火墙状态1firewall-cmd --state 返回running，防火墙在运行返回not running，防火墙已经关闭。 关闭防火墙命令1systemctl stop firewalld.service 开启防火墙命令1systemctl start firewalld.service 查看防火墙设置1iptables -L 查看以开放的端口1firewall-cmd --zone=public --list-all 注意：如果要开放某个端口，要在防火墙开起来running的前提下才可以！ 添加端口1firewall-cmd --zone=public --add-port=5432/tcp --permanent (开放5432端口) 1firewall-cmd --reload （重启生效） 删除端口1firewall-cmd --zone=public --remove-port=/tcp --permanent 1firewall-cmd --reload （重启生效） 重启防火墙1systemctl restart firewalld.service","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"防火墙","slug":"防火墙","permalink":"https://blog.senshine.top/tags/防火墙/"}]},{"title":"centos安装nodejs简易版本","date":"2018-03-13T15:19:51.000Z","path":"2018/03/13/2018313231922/","text":"安装步骤选择合适的版本安装4.x版本 1curl --silent --location https://rpm.nodesource.com/setup_4.x | bash - 5.x版本 1curl --silent --location https://rpm.nodesource.com/setup_5.x | bash - 8.x版本 1curl --silent --location https://rpm.nodesource.com/setup_8.x | bash - 安装依赖库1yum -y install gcc make gcc-c++ openssl-devel wget 或者 1yum install -y gcc-c++ make 快速安装1yum install -y nodejs 检查nodejs和npm版本1node -v 1npm -v","tags":[{"name":"centos","slug":"centos","permalink":"https://blog.senshine.top/tags/centos/"},{"name":"nodejs","slug":"nodejs","permalink":"https://blog.senshine.top/tags/nodejs/"}]}]